initSidebarItems({"enum":[["Value","Represents an S-expression value."]],"fn":[["from_reader","Parse a value from an input stream of S-expressions, using the default parser options."],["from_reader_custom","Parse a value from an input stream of S-expressions, using the default parser options."],["from_slice","Deserialize an instance of type `T` from an S-expression byte slice, using the default parser options."],["from_slice_custom","Deserialize an instance of type `T` from an S-expression byte slice, using the default parser options."],["from_str","Deserialize an instance of type `T` from an S-expression string, using the default parser options."],["from_str_custom","Deserialize an instance of type `T` from an S-expression string."],["from_value","Interpret a `lexpr::Value` as an instance of type `T`."],["to_string","Serialize an instance of type `T` into an S-expression string, using the default printer options."],["to_string_custom","Serialize an instance of type `T` into an S-expression string."],["to_value","Convert a `T` into `lexpr::Value` which is an enum that can represent any valid S-expression data."],["to_vec","Serialize an instance of type `T` into an S-expression byte vector, using the default printer options."],["to_vec_custom","Serialize an instance of type `T` into an S-expression byte vector."],["to_writer","Serialize an instance of type `T` into an S-expression byte vector, using the default printer options."],["to_writer_custom","Serialize an instance of type `T` into an S-expression byte vector."]],"mod":[["error","When serializing or deserializing S-expressions goes wrong."],["parse","S-expression parser and options."],["print","Converting S-expression values into text."]],"struct":[["Cons","A Lisp \"cons cell\"."]]});